diff -U 3 -H -d -r -N -- Ultracopier/ListThread.cpp Rsync/ListThread.cpp
--- Ultracopier/ListThread.cpp	2013-01-14 10:58:10.000000000 +0100
+++ Rsync/ListThread.cpp	2013-01-14 13:20:55.289004644 +0100
@@ -21,6 +21,7 @@
     numberOfInodeOperation		= 0;
     maxSpeed			= 0;
     doRightTransfer			= false;
+    rsync			= false;
     keepDate			= false;
     blockSize			= ULTRACOPIER_PLUGIN_DEFAULT_BLOCK_SIZE*1024;
     osBufferLimit			= 512;
@@ -261,6 +262,21 @@
     this->autoStart=autoStart;
 }
 
+/// \brief set rsync
+void ListThread::setRsync(const bool rsync)
+{
+    this->rsync=rsync;
+    int index=0;
+    loop_sub_size_transfer_thread_search=transferThreadList.size();
+    while(index<loop_sub_size_transfer_thread_search)
+    {
+        transferThreadList.at(index)->setRsync(rsync);
+        index++;
+    }
+    for(int i=0;i<scanFileOrFolderThreadsPool.size();i++)
+        scanFileOrFolderThreadsPool.at(i)->setRsync(rsync);
+}
+
 //set check destination folder
 void ListThread::setCheckDestinationFolderExists(const bool checkDestinationFolderExists)
 {
@@ -854,6 +870,18 @@
         actionToDoListInode_afterTheTransfer << temp;
 }
 
+//rsync rm
+void ListThread::addToRmForRsync(const QString& inode)
+{
+    ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"inode: "+inode);
+    actionToDoInode temp;
+    temp.type	= ActionType_RmSync;
+    temp.id		= generateIdNumber();
+    temp.folder.setFile(inode);
+    temp.isRunning	= false;
+    actionToDoListInode << temp;
+}
+
 //send action done
 void ListThread::sendActionDone()
 {
@@ -1619,7 +1647,7 @@
     loop_size=actionToDoListInode.size();
     while(int_for_loop<loop_size)
     {
-        if(actionToDoListInode.at(int_for_loop).type==ActionType_RmPath)
+        if(actionToDoListInode.at(int_for_loop).type==ActionType_RmPath || actionToDoListInode.at(int_for_loop).type==ActionType_RmSync)
         {
             ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,QString("stop rmpath: %1").arg(actionToDoListInode.at(int_for_loop).folder.absoluteFilePath()));
             actionToDoListInode.removeAt(int_for_loop);
@@ -1753,6 +1781,7 @@
     last->set_osBuffer(osBuffer);
     last->set_osBufferLimited(osBufferLimited);
     last->set_osBufferLimit(osBufferLimit);
+    last->setRsync(rsync);
 
     #ifdef ULTRACOPIER_PLUGIN_DEBUG
     connect(last,&TransferThread::debugInformation,			this,&ListThread::debugInformation,		Qt::QueuedConnection);
diff -U 3 -H -d -r -N -- Ultracopier/ListThread.h Rsync/ListThread.h
--- Ultracopier/ListThread.h	2012-12-29 12:51:30.000000000 +0100
+++ Rsync/ListThread.h	2013-01-14 13:20:55.290004644 +0100
@@ -75,7 +75,8 @@
     enum ActionType
     {
         ActionType_MkPath=1,
-        ActionType_RmPath=2
+        ActionType_RmPath=2,
+        ActionType_RmSync=3
     };
     /// \brief to store one action to do
     struct actionToDoInode
@@ -153,6 +154,8 @@
     void setBlockSize(const int blockSize);
     /// \brief set auto start
     void setAutoStart(const bool autoStart);
+    /// \brief set rsync
+    void setRsync(const bool rsync);
     /// \brief set check destination folder
     void setCheckDestinationFolderExists(const bool checkDestinationFolderExists);
     /// \brief set data local to the thread
@@ -198,6 +201,7 @@
     quint64				bytesToTransfer;
     quint64				bytesTransfered;
     bool				autoStart;
+    bool                rsync;
     bool				putInPause;
     QList<Ultracopier::ReturnActionOnCopyList>	actionDone;///< to action to send to the interface
     quint64				idIncrementNumber;///< to store the last id returned
@@ -311,6 +315,8 @@
     quint64 addToMkPath(const QString& folder);
     //add rm path to do
     void addToRmPath(const QString& folder,const int& inodeToRemove);
+    //rsync rm
+    void addToRmForRsync(const QString& inode);
     //send the progression, after full reset of the interface (then all is empty)
     void syncTransferList_internal();
 signals:
diff -U 3 -H -d -r -N -- Ultracopier/ListThread_InodeAction.cpp Rsync/ListThread_InodeAction.cpp
--- Ultracopier/ListThread_InodeAction.cpp	2012-10-20 01:04:17.000000000 +0200
+++ Rsync/ListThread_InodeAction.cpp	2013-01-14 13:20:55.290004644 +0100
@@ -12,47 +12,55 @@
 switch(currentActionToDoInode.type)
 {
 case ActionType_MkPath:
-	ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,QString("launch mkpath: %1").arg(currentActionToDoInode.folder.absoluteFilePath()));
-	mkPathQueue.addPath(currentActionToDoInode.folder.absoluteFilePath());
-	currentActionToDoInode.isRunning=true;
-	numberOfInodeOperation++;
-	if(numberOfInodeOperation>=ULTRACOPIER_PLUGIN_MAXPARALLELINODEOPT)
-		return;
+    ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,QString("launch mkpath: %1").arg(currentActionToDoInode.folder.absoluteFilePath()));
+    mkPathQueue.addPath(currentActionToDoInode.folder.absoluteFilePath());
+    currentActionToDoInode.isRunning=true;
+    numberOfInodeOperation++;
+    if(numberOfInodeOperation>=ULTRACOPIER_PLUGIN_MAXPARALLELINODEOPT)
+        return;
+break;
+case ActionType_RmSync:
+    ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,QString("launch rm to sync: %1").arg(currentActionToDoInode.folder.absoluteFilePath()));
+    rmPathQueue.addPath(currentActionToDoInode.folder.absoluteFilePath(),true);
+    currentActionToDoInode.isRunning=true;
+    numberOfInodeOperation++;
+    if(numberOfInodeOperation>=ULTRACOPIER_PLUGIN_MAXPARALLELINODEOPT)
+        return;
 break;
 case ActionType_RmPath:
 /*	What is this code?
-	if((int_for_loop+number_rm_path_moved)>=(loop_size-1))
-	{
-		if(numberOfTranferRuning)
-			break;
-		else
-			currentActionToDoInode.size=0;
-	}*/
-	//then empty (no file), can try remove it
-	if(true)//currentActionToDoInode.size==0
-	{
-		if(numberOfTranferRuning>0)
-			ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Warning,QString("skipped because already inode = 0 and transfer is running: %1").arg(currentActionToDoInode.folder.absoluteFilePath()));
-		ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,QString("launch rmpath: %1").arg(currentActionToDoInode.folder.absoluteFilePath()));
-		rmPathQueue.addPath(currentActionToDoInode.folder.absoluteFilePath());
-		currentActionToDoInode.isRunning=true;
-		numberOfInodeOperation++;
-		if(numberOfInodeOperation>=ULTRACOPIER_PLUGIN_MAXPARALLELINODEOPT)
-			return;
-	}
-	else //have not finish all the transfer into it, do it later
-	{
-		ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Critical,"should never pass here");
-		/*actionToDoListInode.move(int_for_internal_loop,actionToDoListInode_count-1);
-		currentActionToDoInode.id=generateIdNumber();
-		number_rm_path_moved++;
-		currentActionToDoInode.size=0;
-		continue;*/
-	}
+    if((int_for_loop+number_rm_path_moved)>=(loop_size-1))
+    {
+        if(numberOfTranferRuning)
+            break;
+        else
+            currentActionToDoInode.size=0;
+    }*/
+    //then empty (no file), can try remove it
+    if(true)//currentActionToDoInode.size==0
+    {
+        if(numberOfTranferRuning>0)
+            ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Warning,QString("skipped because already inode = 0 and transfer is running: %1").arg(currentActionToDoInode.folder.absoluteFilePath()));
+        ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,QString("launch rmpath: %1").arg(currentActionToDoInode.folder.absoluteFilePath()));
+        rmPathQueue.addPath(currentActionToDoInode.folder.absoluteFilePath(),false);
+        currentActionToDoInode.isRunning=true;
+        numberOfInodeOperation++;
+        if(numberOfInodeOperation>=ULTRACOPIER_PLUGIN_MAXPARALLELINODEOPT)
+            return;
+    }
+    else //have not finish all the transfer into it, do it later
+    {
+        ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Critical,"should never pass here");
+        /*actionToDoListInode.move(int_for_internal_loop,actionToDoListInode_count-1);
+        currentActionToDoInode.id=generateIdNumber();
+        number_rm_path_moved++;
+        currentActionToDoInode.size=0;
+        continue;*/
+    }
 break;
 default:
-	ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Warning,QString("Wrong type at inode action"));
-	return;
+    ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Warning,QString("Wrong type at inode action"));
+    return;
 }
 
 #endif
diff -U 3 -H -d -r -N -- Ultracopier/RmPath.cpp Rsync/RmPath.cpp
--- Ultracopier/RmPath.cpp	2012-12-27 12:48:06.000000000 +0100
+++ Rsync/RmPath.cpp	2013-01-14 13:20:55.291004644 +0100
@@ -2,126 +2,180 @@
 
 RmPath::RmPath()
 {
-	stopIt=false;
-	waitAction=false;
-	setObjectName("RmPath");
-	moveToThread(this);
-	start();
+    stopIt=false;
+    waitAction=false;
+    setObjectName("RmPath");
+    moveToThread(this);
+    start();
 }
 
 RmPath::~RmPath()
 {
-	stopIt=true;
-	quit();
-	wait();
+    stopIt=true;
+    quit();
+    wait();
 }
 
-void RmPath::addPath(const QString &path)
+void RmPath::addPath(const QString &path,const bool &toSync)
 {
-	ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"start: "+path);
-	if(stopIt)
-		return;
-	emit internalStartAddPath(path);
+    ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"start: "+path);
+    if(stopIt)
+        return;
+    emit internalStartAddPath(path,toSync);
 }
 
 void RmPath::skip()
 {
-	ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"start");
-	emit internalStartSkip();
+    ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"start");
+    emit internalStartSkip();
 }
 
 void RmPath::retry()
 {
-	ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"start");
-	emit internalStartRetry();
+    ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"start");
+    emit internalStartRetry();
 }
 
 void RmPath::run()
 {
-	connect(this,&RmPath::internalStartAddPath,	this,&RmPath::internalAddPath,		Qt::QueuedConnection);
-	connect(this,&RmPath::internalStartDoThisPath,	this,&RmPath::internalDoThisPath,	Qt::QueuedConnection);
-	connect(this,&RmPath::internalStartSkip,	this,&RmPath::internalSkip,		Qt::QueuedConnection);
-	connect(this,&RmPath::internalStartRetry,	this,&RmPath::internalRetry,		Qt::QueuedConnection);
-	exec();
+    connect(this,&RmPath::internalStartAddPath,	this,&RmPath::internalAddPath,		Qt::QueuedConnection);
+    connect(this,&RmPath::internalStartDoThisPath,	this,&RmPath::internalDoThisPath,	Qt::QueuedConnection);
+    connect(this,&RmPath::internalStartSkip,	this,&RmPath::internalSkip,		Qt::QueuedConnection);
+    connect(this,&RmPath::internalStartRetry,	this,&RmPath::internalRetry,		Qt::QueuedConnection);
+    exec();
 }
 
 void RmPath::internalDoThisPath()
 {
-	if(waitAction || pathList.isEmpty())
-		return;
-	ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"start: "+pathList.first());
-	if(!rmpath(pathList.first()))
-	{
-		if(stopIt)
-			return;
-		waitAction=true;
-		ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Warning,"Unable to remove the folder: "+pathList.first());
-		emit errorOnFolder(pathList.first(),tr("Unable to remove the folder"));
-		return;
-	}
-	pathList.removeFirst();
-	emit firstFolderFinish();
-	checkIfCanDoTheNext();
+    if(waitAction || pathList.isEmpty())
+        return;
+    ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"start: "+pathList.first());
+    if(waitAction || pathList.isEmpty())
+        return;
+    if(!toSyncList.first())
+    {
+        if(!rmpath(pathList.first(),false))
+        {
+            if(stopIt)
+                return;
+            waitAction=true;
+            ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Warning,"Unable to remove the folder: "+pathList.first());
+            emit errorOnFolder(pathList.first(),tr("Unable to remove the folder"));
+            return;
+        }
+    }
+    else
+    {
+        if(QFileInfo(pathList.first()).isDir())
+        {
+            if(!rmpath(pathList.first(),true))
+            {
+                if(stopIt)
+                    return;
+                waitAction=true;
+                ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Warning,"Unable to remove the folder: "+pathList.first());
+                emit errorOnFolder(pathList.first(),tr("Unable to remove the folder"));
+                return;
+            }
+        }
+        else if(!rmfile(pathList.first()))
+        {
+            if(stopIt)
+                return;
+            waitAction=true;
+            ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Warning,"Unable to remove the file: "+pathList.first());
+            emit errorOnFolder(pathList.first(),tr("Unable to remove the file"));
+            return;
+        }
+    }
+    pathList.removeFirst();
+    toSyncList.removeFirst();
+    emit firstFolderFinish();
+    checkIfCanDoTheNext();
+}
+
+bool RmPath::rmfile(QString filePath)
+{
+    QFile file(filePath);
+    if(!file.remove())
+    {
+        ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Warning,"unable to remove the file: "+file.fileName()+", error: "+file.errorString());
+        return false;
+    }
+    else
+        return true;
 }
 
 /** remplace QDir::rmpath() because it return false if the folder not exists
   and seam bug with parent folder */
-bool RmPath::rmpath(const QDir &dir)
+bool RmPath::rmpath(const QDir &dir,const bool &toSync)
 {
-	if(!dir.exists())
-		return true;
-	bool allHaveWork=true;
-	QFileInfoList list = dir.entryInfoList(QDir::AllEntries|QDir::NoDotAndDotDot|QDir::Hidden|QDir::System,QDir::DirsFirst);
-	for (int i = 0; i < list.size(); ++i)
-	{
-		QFileInfo fileInfo(list.at(i));
-		if(!fileInfo.isDir())
-		{
-			ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Warning,"found a file: "+fileInfo.fileName());
-			allHaveWork=false;
-		}
-		else
-		{
-			//return the fonction for scan the new folder
-			if(!rmpath(dir.absolutePath()+'/'+fileInfo.fileName()+'/'))
-				allHaveWork=false;
-		}
-	}
-	if(!allHaveWork)
-		return false;
-	allHaveWork=dir.rmdir(dir.absolutePath());
-	if(!allHaveWork)
-		ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Warning,"unable to remove the folder: "+dir.absolutePath());
-	return allHaveWork;
+    if(!dir.exists())
+        return true;
+    bool allHaveWork=true;
+    QFileInfoList list = dir.entryInfoList(QDir::AllEntries|QDir::NoDotAndDotDot|QDir::Hidden|QDir::System,QDir::DirsFirst);
+    for (int i = 0; i < list.size(); ++i)
+    {
+        QFileInfo fileInfo(list.at(i));
+        if(!fileInfo.isDir())
+        {
+            if(toSync)
+            {
+                if(!rmfile(fileInfo.absoluteFilePath()))
+                {
+                    ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Warning,"unable to remove a file: "+fileInfo.fileName());
+                    allHaveWork=false;
+            }
+            }
+            else
+            {
+                ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Warning,"found a file: "+fileInfo.fileName());
+                allHaveWork=false;
+            }
+        }
+        else
+        {
+            //return the fonction for scan the new folder
+            if(!rmpath(dir.absolutePath()+'/'+fileInfo.fileName()+'/',toSync))
+                allHaveWork=false;
+        }
+    }
+    if(!allHaveWork)
+        return false;
+    allHaveWork=dir.rmdir(dir.absolutePath());
+    if(!allHaveWork)
+        ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Warning,"unable to remove the folder: "+dir.absolutePath());
+    return allHaveWork;
 }
 
-void RmPath::internalAddPath(const QString &path)
+void RmPath::internalAddPath(const QString &path,const bool &toSync)
 {
-	ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"start: "+path);
-	pathList << path;
-	if(!waitAction)
-		checkIfCanDoTheNext();
+    ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"start: "+path);
+    pathList << path;
+    toSyncList << toSync;
+    if(!waitAction)
+        checkIfCanDoTheNext();
 }
 
 void RmPath::checkIfCanDoTheNext()
 {
-	if(!waitAction && !stopIt && pathList.size()>0)
-		emit internalStartDoThisPath();
+    if(!waitAction && !stopIt && pathList.size()>0)
+        emit internalStartDoThisPath();
 }
 
 void RmPath::internalSkip()
 {
-	ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"start");
-	waitAction=false;
-	pathList.removeFirst();
-	emit firstFolderFinish();
-	checkIfCanDoTheNext();
+    ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"start");
+    waitAction=false;
+    pathList.removeFirst();
+    emit firstFolderFinish();
+    checkIfCanDoTheNext();
 }
 
 void RmPath::internalRetry()
 {
-	ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"start");
-	waitAction=false;
-	checkIfCanDoTheNext();
+    ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"start");
+    waitAction=false;
+    checkIfCanDoTheNext();
 }
 
diff -U 3 -H -d -r -N -- Ultracopier/RmPath.h Rsync/RmPath.h
--- Ultracopier/RmPath.h	2012-10-20 01:25:55.000000000 +0200
+++ Rsync/RmPath.h	2013-01-14 13:20:55.291004644 +0100
@@ -23,11 +23,11 @@
     explicit RmPath();
     ~RmPath();
     /// \brief add new path to remove
-    void addPath(const QString &path);
+    void addPath(const QString &path, const bool &toSync);
 signals:
     void errorOnFolder(const QFileInfo &,const QString &);
     void firstFolderFinish();
-    void internalStartAddPath(const QString &path);
+    void internalStartAddPath(const QString &path,const bool &toSync);
     void internalStartDoThisPath();
     void internalStartSkip();
     void internalStartRetry();
@@ -41,12 +41,14 @@
     bool stopIt;
     bool skipIt;
     QStringList pathList;
+    QList<bool> toSyncList;
     void checkIfCanDoTheNext();
     QDir dir;
-    bool rmpath(const QDir &dir);
+    bool rmpath(const QDir &dir, const bool &toSync);
 private slots:
     void internalDoThisPath();
-    void internalAddPath(const QString &path);
+    bool rmfile(QString filePath);
+    void internalAddPath(const QString &path,const bool &toSync);
     void internalSkip();
     void internalRetry();
 };
diff -U 3 -H -d -r -N -- Ultracopier/TransferThread.cpp Rsync/TransferThread.cpp
--- Ultracopier/TransferThread.cpp	2013-01-14 11:43:23.000000000 +0100
+++ Rsync/TransferThread.cpp	2013-01-14 13:20:55.292004644 +0100
@@ -26,6 +26,7 @@
     alwaysDoFileExistsAction= FileExists_NotSet;
     readError		= false;
     writeError		= false;
+    rsync           = false;
     this->mkpathTransfer	= mkpathTransfer;
     readThread.setWriteThread(&writeThread);
 
@@ -286,7 +287,7 @@
 {
     //check if destination exists
     ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"["+QString::number(id)+"] overwrite: "+QString::number(fileExistsAction)+", always action: "+QString::number(alwaysDoFileExistsAction));
-    if(alwaysDoFileExistsAction==FileExists_Overwrite || readError || writeError)
+    if(alwaysDoFileExistsAction==FileExists_Overwrite || rsync|| readError|| writeError)
         return false;
     if(destinationInfo.exists())
     {
@@ -1180,6 +1181,12 @@
     driveManagement.setDrive(mountSysPoint);
 }
 
+/// \brief set rsync
+void TransferThread::setRsync(const bool rsync)
+{
+    this->rsync=rsync;
+}
+
 void TransferThread::set_osBufferLimit(unsigned int osBufferLimit)
 {
     this->osBufferLimit=osBufferLimit;
diff -U 3 -H -d -r -N -- Ultracopier/TransferThread.h Rsync/TransferThread.h
--- Ultracopier/TransferThread.h	2013-01-14 10:43:20.000000000 +0100
+++ Rsync/TransferThread.h	2013-01-14 13:20:55.292004644 +0100
@@ -111,6 +111,7 @@
     void putAtBottom();
 
     void setDrive(QStringList mountSysPoint);
+    void setRsync(const bool rsync);
 
     void set_osBufferLimit(unsigned int osBufferLimit);
     void setRenamingRules(QString firstRenamingRule,QString otherRenamingRule);
@@ -153,6 +154,7 @@
     QString			destination;
     Ultracopier::CopyMode		mode;
     bool			doRightTransfer;
+    bool            rsync;
     bool			keepDate;
     bool			readIsReadyVariable;
     bool			writeIsReadyVariable;
diff -U 3 -H -d -r -N -- Ultracopier/copyEngine.cpp Rsync/copyEngine.cpp
--- Ultracopier/copyEngine.cpp	2012-12-29 13:38:34.000000000 +0100
+++ Rsync/copyEngine.cpp	2013-01-14 13:20:55.293004644 +0100
@@ -183,12 +183,14 @@
     connect(ui->blockSize,		&QCheckBox::valueChanged,	&threadOfTheTransfer,	&copyEngine::setBlockSize);*/
     connect(ui->autoStart,		&QCheckBox::toggled,		this,			&copyEngine::setAutoStart);
     connect(ui->checkBoxDestinationFolderExists,	&QCheckBox::toggled,this,		&copyEngine::setCheckDestinationFolderExists);
+    connect(ui->rsync,	&QCheckBox::toggled,this,		&copyEngine::setRsync);
     uiIsInstalled=true;
     setRightTransfer(doRightTransfer);
     setKeepDate(keepDate);
     setSpeedLimitation(maxSpeed);
     setBlockSize(blockSize);
     setAutoStart(autoStart);
+    setRsync(rsync);
     setCheckDestinationFolderExists(checkDestinationFolderExists);
     set_doChecksum(doChecksum);
     set_checksumIgnoreIfImpossible(checksumIgnoreIfImpossible);
@@ -517,6 +519,13 @@
 /** \brief give the forced mode, to export/import transfer list */
 void copyEngine::forceMode(const Ultracopier::CopyMode &mode)
 {
+    if(mode==Ultracopier::Move)
+    {
+        listThread->setRsync(false);
+        rsync=false;
+    }
+    if(uiIsInstalled)
+        ui->rsync->setEnabled(mode==Ultracopier::Copy);
     if(forcedMode)
     {
         ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Warning,QString("Mode forced previously"));
@@ -630,6 +639,19 @@
     listThread->setAutoStart(autoStart);
 }
 
+/// \brief set rsync
+void copyEngine::setRsync(const bool rsync)
+{
+    this->rsync=rsync;
+    if(uiIsInstalled)
+    {
+        ui->rsync->setChecked(rsync);
+        ui->rsync->setEnabled(forcedMode && mode==Ultracopier::Copy);
+        ui->label_rsync->setEnabled(forcedMode && mode==Ultracopier::Copy);
+    }
+    listThread->setRsync(rsync);
+}
+
 //set check destination folder
 void copyEngine::setCheckDestinationFolderExists(const bool checkDestinationFolderExists)
 {
diff -U 3 -H -d -r -N -- Ultracopier/copyEngine.h Rsync/copyEngine.h
--- Ultracopier/copyEngine.h	2012-10-29 08:51:49.000000000 +0100
+++ Rsync/copyEngine.h	2013-01-14 13:20:55.293004644 +0100
@@ -59,6 +59,7 @@
     bool				keepDate;
     int				blockSize;
     bool				autoStart;
+    bool                rsync;
     bool				checkDestinationFolderExists;
     FileExistsAction		alwaysDoThisActionForFileExists;
     FileErrorAction			alwaysDoThisActionForFileError;
@@ -290,6 +291,8 @@
     void setBlockSize(const int blockSize);
     /// \brief set auto start
     void setAutoStart(const bool autoStart);
+    /// \brief set rsync
+    void setRsync(const bool rsync);
     /// \brief set if need check if the destination folder exists
     void setCheckDestinationFolderExists(const bool checkDestinationFolderExists);
     /// \brief reset widget
diff -U 3 -H -d -r -N -- Ultracopier/documentation.dox Rsync/documentation.dox
--- Ultracopier/documentation.dox	2012-12-26 22:42:45.000000000 +0100
+++ Rsync/documentation.dox	2013-01-14 13:20:55.294004644 +0100
@@ -10,7 +10,8 @@
 
   \section mainpage_overview Overview
 
-  The default copy engine for Ultracopier. Support file/folder, copy/move, ...\n
+  The rsync copy engine for Ultracopier. Support file/folder, copy/move, ...\n
+  Thanks to this engine, Ultracopier is transformed into GUI + rsync.
   More informations on <a href="http://ultracopier-wiki.first-world.info/">the wiki of ultracopier</a>. Is part of Ultracopier 0.3 project.
 
   \section mainpage_platforms Platforms
diff -U 3 -H -d -r -N -- Ultracopier/factory.cpp Rsync/factory.cpp
--- Ultracopier/factory.cpp	2012-12-29 13:40:19.000000000 +0100
+++ Rsync/factory.cpp	2013-01-14 13:20:55.294004644 +0100
@@ -40,6 +40,7 @@
     connect(ui->osBuffer,			&QCheckBox::toggled,		this,&Factory::osBuffer_toggled);
     connect(ui->osBufferLimited,		&QCheckBox::toggled,		this,&Factory::osBufferLimited_toggled);
     connect(ui->osBufferLimit,		&QSpinBox::editingFinished,	this,&Factory::osBufferLimit_editingFinished);
+    connect(ui->rsync,		&QCheckBox::toggled,	this,&Factory::setRsync);
 
     connect(filters,&Filters::sendNewFilters,this,&Factory::sendNewFilters);
     connect(ui->filters,&QPushButton::clicked,this,&Factory::showFilterDialog);
@@ -93,6 +94,7 @@
     realObject->setKeepDate(		optionsEngine->getOptionValue("keepDate").toBool());
     realObject->setBlockSize(		optionsEngine->getOptionValue("blockSize").toInt());
     realObject->setAutoStart(		optionsEngine->getOptionValue("autoStart").toBool());
+    realObject->setRsync(           optionsEngine->getOptionValue("rsync").toBool());
     realObject->on_comboBoxFolderColision_currentIndexChanged(ui->comboBoxFolderColision->currentIndex());
     realObject->on_comboBoxFolderError_currentIndexChanged(ui->comboBoxFolderError->currentIndex());
     realObject->setCheckDestinationFolderExists(	optionsEngine->getOptionValue("checkDestinationFolder").toBool());
@@ -145,6 +147,7 @@
         KeysList.append(qMakePair(QString("keepDate"),QVariant(false)));
         KeysList.append(qMakePair(QString("blockSize"),QVariant(ULTRACOPIER_PLUGIN_DEFAULT_BLOCK_SIZE)));//4KB as default
         KeysList.append(qMakePair(QString("autoStart"),QVariant(true)));
+        KeysList.append(qMakePair(QString("rsync"),QVariant(true)));
         KeysList.append(qMakePair(QString("folderError"),QVariant(0)));
         KeysList.append(qMakePair(QString("folderColision"),QVariant(0)));
         KeysList.append(qMakePair(QString("checkDestinationFolder"),QVariant(true)));
@@ -173,6 +176,7 @@
         ui->keepDate->setChecked(optionsEngine->getOptionValue("keepDate").toBool());
         ui->blockSize->setValue(optionsEngine->getOptionValue("blockSize").toUInt());
         ui->autoStart->setChecked(optionsEngine->getOptionValue("autoStart").toBool());
+        ui->rsync->setChecked(optionsEngine->getOptionValue("rsync").toBool());
         ui->comboBoxFolderError->setCurrentIndex(optionsEngine->getOptionValue("folderError").toUInt());
         ui->comboBoxFolderColision->setCurrentIndex(optionsEngine->getOptionValue("folderColision").toUInt());
         ui->checkBoxDestinationFolderExists->setChecked(optionsEngine->getOptionValue("checkDestinationFolder").toBool());
@@ -322,6 +326,15 @@
     ui->osBufferLimit->setEnabled(ui->osBuffer->isChecked() && ui->osBufferLimited->isChecked());
 }
 
+void Factory::setRsync(bool rsync)
+{
+    ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"the checkbox have changed");
+    if(optionsEngine!=NULL)
+        optionsEngine->setOptionValue("rsync",rsync);
+    else
+        ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Critical,"internal error, crash prevented");
+}
+
 void Factory::osBufferLimit_editingFinished()
 {
     ULTRACOPIER_DEBUGCONSOLE(Ultracopier::DebugLevel_Notice,"the spinbox have changed");
diff -U 3 -H -d -r -N -- Ultracopier/factory.h Rsync/factory.h
--- Ultracopier/factory.h	2012-12-29 13:31:49.000000000 +0100
+++ Rsync/factory.h	2013-01-14 13:20:55.295004644 +0100
@@ -71,6 +71,7 @@
     void setKeepDate(bool keepDate);
     void setBlockSize(int blockSize);
     void setAutoStart(bool autoStart);
+    void setRsync(bool rsync);
     void showFilterDialog();
     void sendNewFilters(const QStringList &includeStrings,const QStringList &includeOptions,const QStringList &excludeStrings,const QStringList &excludeOptions);
     void doChecksum_toggled(bool);
diff -U 3 -H -d -r -N -- Ultracopier/informations.xml Rsync/informations.xml
--- Ultracopier/informations.xml	2013-01-14 13:27:06.501005584 +0100
+++ Rsync/informations.xml	2013-01-14 13:23:23.200005019 +0100
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <package>
-	<title xml:lang="en"><![CDATA[Copy engine of Ultracopier]]></title><!-- english is required -->
-	<title xml:lang="fr"><![CDATA[Moteur de copie d'ultracopier]]></title>
+	<title xml:lang="en"><![CDATA[Rsync copy engine]]></title><!-- english is required -->
+	<title xml:lang="fr"><![CDATA[Moteur de copie rsync]]></title>
 	<!-- What kind of plugin this is -->
 	<category>CopyEngine</category>
 	<!-- Who wrote this plugin -->
@@ -14,12 +14,12 @@
 	<!-- the architecture code of this plugin, found PlatformMacro.h into ultracopier source -->
 	<architecture>linux-x86_64-pc</architecture>
 	<!-- Detailed description -->
-	<description xml:lang="en"><![CDATA[Copy engine of Ultracopier, do in Qt for all platform, and copy by stream]]></description>
-	<description xml:lang="fr"><![CDATA[Moteur de copie d'ultracopier, fait en Qt pour toutes les plateformes, et copie par stream]]></description>
+	<description xml:lang="en"><![CDATA[Rsync copy engine, variant of the official copy engine to provide simple way to do backups]]></description>
+	<description xml:lang="fr"><![CDATA[Moteur de copie rsync, variante du moteur de copie officiel pour fournir une maniére simple de faire des backups]]></description>
 	<!-- Version of this release of this plugin, need be like that's: A.B.C.D, where A, B, C and D is number -->
 	<version>0.4.0.2</version>
 	<!-- This internal name should never change, because it is used to detect when a particular plugin is updated. It must comprise only lower case ASCII characters (a-z), numerical digits (0-9), "-", "." or "_", and it must be be unique within the category. And have size lower than 64 char. -->
-	<name>Ultracopier</name>
+	<name>Rsync</name>
 	<!-- Dependency checking. This is used to check when a plugin may not be compatible with an updated version of either Ultracopier or another plugin. This example only checks Ultracopier. -->
 	<dependencies><![CDATA[
 	=ultracopier-0.4
diff -U 3 -H -d -r -N -- Ultracopier/options.ui Rsync/options.ui
--- Ultracopier/options.ui	2012-10-19 12:22:26.000000000 +0200
+++ Rsync/options.ui	2013-01-14 13:20:55.296004644 +0100
@@ -6,8 +6,8 @@
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>356</width>
-    <height>376</height>
+    <width>354</width>
+    <height>399</height>
    </rect>
   </property>
   <layout class="QGridLayout" name="gridLayout">
@@ -122,7 +122,7 @@
    <item row="6" column="2">
     <widget class="QCheckBox" name="checkBoxDestinationFolderExists"/>
    </item>
-   <item row="7" column="0" colspan="3">
+   <item row="8" column="0" colspan="3">
     <widget class="QGroupBox" name="groupBox">
      <property name="title">
       <string>Checksum</string>
@@ -165,24 +165,24 @@
      </layout>
     </widget>
    </item>
-   <item row="8" column="1">
+   <item row="9" column="1">
     <widget class="QLabel" name="label_3">
      <property name="text">
       <string>Enable OS buffer</string>
      </property>
     </widget>
    </item>
-   <item row="8" column="2">
+   <item row="9" column="2">
     <widget class="QCheckBox" name="osBuffer"/>
    </item>
-   <item row="9" column="0" colspan="2">
+   <item row="10" column="0" colspan="2">
     <widget class="QCheckBox" name="osBufferLimited">
      <property name="text">
       <string>OS buffer only if smaller than</string>
      </property>
     </widget>
    </item>
-   <item row="9" column="2">
+   <item row="10" column="2">
     <widget class="QSpinBox" name="osBufferLimit">
      <property name="suffix">
       <string>KB</string>
@@ -205,7 +205,7 @@
      </property>
     </widget>
    </item>
-   <item row="12" column="1">
+   <item row="13" column="1">
     <spacer name="verticalSpacer">
      <property name="orientation">
       <enum>Qt::Vertical</enum>
@@ -218,20 +218,34 @@
      </property>
     </spacer>
    </item>
-   <item row="11" column="1">
+   <item row="12" column="1">
     <widget class="QPushButton" name="filters">
      <property name="text">
       <string>Filters</string>
      </property>
     </widget>
    </item>
-   <item row="10" column="1">
+   <item row="11" column="1">
     <widget class="QPushButton" name="renamingRules">
      <property name="text">
       <string>Renaming rules</string>
      </property>
     </widget>
    </item>
+   <item row="7" column="2">
+    <widget class="QCheckBox" name="rsync">
+     <property name="text">
+      <string/>
+     </property>
+    </widget>
+   </item>
+   <item row="7" column="0" colspan="2">
+    <widget class="QLabel" name="label_rsync">
+     <property name="text">
+      <string>Rsync (only in copy mode)</string>
+     </property>
+    </widget>
+   </item>
   </layout>
  </widget>
  <resources/>
diff -U 3 -H -d -r -N -- Ultracopier/scanFileOrFolder.cpp Rsync/scanFileOrFolder.cpp
--- Ultracopier/scanFileOrFolder.cpp	2013-01-14 10:22:17.000000000 +0100
+++ Rsync/scanFileOrFolder.cpp	2013-01-14 13:20:55.296004644 +0100
@@ -1,7 +1,10 @@
 #include "scanFileOrFolder.h"
 
+#include <QDateTime>
+
 scanFileOrFolder::scanFileOrFolder(Ultracopier::CopyMode mode)
 {
+    rsync   = false;
     stopped	= true;
     stopIt	= false;
     this->mode=mode;
@@ -425,7 +428,17 @@
                     if(!included)
                     {}
                     else
-                        emit fileTransfer(fileInfo.absoluteFilePath(),finalDest+fileName,mode);
+                    {
+                        bool sendToTransfer=false;
+                        if(!rsync)
+                            sendToTransfer=true;
+                        else if(!QFile::exists(finalDest+fileName))
+                            sendToTransfer=true;
+                        else if(fileInfo.lastModified()!=QFileInfo(finalDest+fileName).lastModified())
+                            sendToTransfer=true;
+                        if(sendToTransfer)
+                            emit fileTransfer(fileInfo.absoluteFilePath(),finalDest+fileName,mode);
+                    }
                 }
             }
         }
@@ -435,8 +448,41 @@
                 //listFolder(source,destination,suffixPath+fileInfo.fileName()+QDir::separator());
                 listFolder(source,destination,sourceSuffixPath+fileInfo.fileName()+"/",destinationSuffixPath+fileInfo.fileName()+"/");//put unix separator because it's transformed into that's under windows too
             else
-                emit fileTransfer(fileInfo.absoluteFilePath(),finalDest+fileInfo.fileName(),mode);
+            {
+                bool sendToTransfer=false;
+                if(!rsync)
+                    sendToTransfer=true;
+                else if(!QFile::exists(finalDest+fileInfo.fileName()))
+                    sendToTransfer=true;
+                else if(fileInfo.lastModified()!=QFileInfo(finalDest+fileInfo.fileName()).lastModified())
+                    sendToTransfer=true;
+                if(sendToTransfer)
+                    emit fileTransfer(fileInfo.absoluteFilePath(),finalDest+fileInfo.fileName(),mode);
+            }
+        }
+    }
+    if(rsync)
+    {
+        //check the reverse path here
+        QFileInfoList entryListDestination=QDir(finalDest).entryInfoList(QDir::AllEntries|QDir::NoDotAndDotDot|QDir::Hidden|QDir::System,QDir::DirsFirst|QDir::Name|QDir::IgnoreCase);//possible wait time here
+        int sizeEntryListDestination=entryListDestination.size();
+        int index=0;
+        for (int indexDestination=0;indexDestination<sizeEntryListDestination;++indexDestination)
+        {
+            index=0;
+            while(index<sizeEntryList)
+            {
+                if(entryListDestination.at(indexDestination).fileName()==entryList.at(index).fileName())
+                    break;
+                index++;
+            }
+            if(index==sizeEntryList)
+            {
+                //then not found, need be remove
+                emit addToRmForRsync(finalDest+entryListDestination.at(indexDestination).fileName());
+            }
         }
+        return;
     }
     if(mode==Ultracopier::Move)
     {
@@ -456,3 +502,9 @@
     this->firstRenamingRule=firstRenamingRule;
     this->otherRenamingRule=otherRenamingRule;
 }
+
+/// \brief set rsync
+void scanFileOrFolder::setRsync(const bool rsync)
+{
+    this->rsync=rsync;
+}
diff -U 3 -H -d -r -N -- Ultracopier/scanFileOrFolder.h Rsync/scanFileOrFolder.h
--- Ultracopier/scanFileOrFolder.h	2012-10-20 01:25:05.000000000 +0200
+++ Rsync/scanFileOrFolder.h	2013-01-14 13:20:55.296004644 +0100
@@ -37,6 +37,7 @@
     /// \brief set if need check if the destination exists
     void setCheckDestinationFolderExists(const bool checkDestinationFolderExists);
     void setRenamingRules(QString firstRenamingRule,QString otherRenamingRule);
+    void setRsync(const bool rsync);
 signals:
     void fileTransfer(const QFileInfo &source,const QFileInfo &destination,const Ultracopier::CopyMode &mode);
     /// \brief To debug source
@@ -48,6 +49,7 @@
     void newFolderListing(const QString &path);
     void addToMkPath(const QString& folder);
     void addToRmPath(const QString& folder,const int& inodeToRemove);
+    void addToRmForRsync(const QString& inode);
 public slots:
     void addToList(const QStringList& sources,const QString& destination);
     void setFilters(QList<Filters_rules> include,QList<Filters_rules> exclude);
@@ -67,6 +69,7 @@
     QRegularExpression	folder_isolation;
     QString			prefix;
     QString			suffix;
+    bool            rsync;
     Ultracopier::CopyMode		mode;
     QList<Filters_rules>	include,exclude;
     QList<Filters_rules>	include_send,exclude_send;
